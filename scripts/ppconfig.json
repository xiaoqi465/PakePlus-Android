{"name":"Claudeexperience","url":"https://share.claude.best/","showName":"Claudeexperience","appid":"com.Claudeexperience.app","icon":"","iconRound":true,"state":true,"single":true,"injectJq":true,"tauriApi":false,"devbug":true,"version":"1.0.1","preview":"desktop","platform":["1-1"],"width":800,"height":600,"desc":"","jsFile":[],"filterCss":"","customJs":"console.log(\n    '%cbuild from PakePlus： https://github.com/Sjj1024/PakePlus',\n    'color:orangered;font-weight:bolder'\n)\n\n// 保存原始的window.open函数\nconst originalWindowOpen = window.open\n\n// 用于记录点击次数的Map，以链接URL为key\nconst clickCountMap = new Map()\n\n// 可选：设置点击计数重置的时间间隔（毫秒）\nconst CLICK_RESET_TIME = 30000 // 30秒后重置点击计数\n\n// 点击事件处理函数\nconst hookClick = (e) => {\n    // 使用更精确的选择器查找链接\n    const origin = e.target.closest('a[href]')\n    const isBaseTargetBlank = document.querySelector('head base[target=\"_blank\"]')\n    \n    console.log('检测到点击:', {\n        target: e.target,\n        origin: origin,\n        href: origin?.href,\n        targetAttr: origin?.target,\n        isBaseTargetBlank: !!isBaseTargetBlank\n    })\n    \n    // 检查是否应该处理链接\n    if (origin && origin.href) {\n        const shouldHandle = \n            origin.target === '_blank' || \n            (isBaseTargetBlank && !origin.target) ||\n            origin.target === '_new'\n        \n        if (shouldHandle) {\n            const linkUrl = origin.href\n            \n            // 获取当前链接的点击次数\n            const currentCount = clickCountMap.get(linkUrl) || 0\n            const newCount = currentCount + 1\n            \n            console.log(`链接 ${linkUrl} 被点击第 ${newCount} 次`)\n            \n            // 更新点击次数\n            clickCountMap.set(linkUrl, newCount)\n            \n            // 设置定时器重置点击计数\n            setTimeout(() => {\n                if (clickCountMap.get(linkUrl) === newCount) {\n                    console.log(`重置链接 ${linkUrl} 的点击计数`)\n                    clickCountMap.delete(linkUrl)\n                }\n            }, CLICK_RESET_TIME)\n            \n            // 第一次点击：阻止默认行为，不跳转\n            if (newCount === 1) {\n                console.log('第一次点击，阻止跳转:', linkUrl)\n                e.preventDefault()\n                e.stopPropagation()\n                \n                // 可选：给用户一些视觉反馈\n                if (origin.style) {\n                    const originalColor = origin.style.backgroundColor\n                    origin.style.backgroundColor = '#ffeb3b'\n                    setTimeout(() => {\n                        origin.style.backgroundColor = originalColor\n                    }, 200)\n                }\n                \n                return false\n            }\n            \n            // 第二次及以后的点击：执行跳转\n            if (newCount >= 2) {\n                console.log('第二次点击，准备跳转:', linkUrl)\n                \n                // 阻止默认行为\n                e.preventDefault()\n                e.stopPropagation()\n                \n                // 清除该链接的点击计数\n                clickCountMap.delete(linkUrl)\n                \n                // 延迟执行，确保事件处理完成\n                setTimeout(() => {\n                    try {\n                        console.log('尝试打开新窗口:', linkUrl)\n                        const newWindow = originalWindowOpen.call(window, linkUrl, '_blank', 'noopener,noreferrer')\n                        \n                        if (!newWindow || newWindow.closed || typeof newWindow.closed == 'undefined') {\n                            console.warn('弹窗被阻止，尝试备用方案')\n                            // 备用方案：尝试在当前窗口打开\n                            window.location.href = linkUrl\n                        } else {\n                            console.log('新窗口打开成功')\n                        }\n                    } catch (error) {\n                        console.error('打开新窗口失败:', error)\n                        // 备用方案\n                        window.location.href = linkUrl\n                    }\n                }, 10)\n                \n                return false\n            }\n        }\n    }\n    \n    console.log('正常处理链接点击')\n}\n\n// 用于记录window.open调用次数的Map\nconst windowOpenCountMap = new Map()\n\n// 重写window.open函数\nwindow.open = function (url, target, features) {\n    console.log('window.open 被调用:', { url, target, features })\n    \n    // 如果没有指定target或target为_blank，应用双击逻辑\n    if (!target || target === '_blank' || target === '_new') {\n        const currentCount = windowOpenCountMap.get(url) || 0\n        const newCount = currentCount + 1\n        \n        console.log(`window.open 被调用第 ${newCount} 次，URL: ${url}`)\n        \n        // 更新调用次数\n        windowOpenCountMap.set(url, newCount)\n        \n        // 设置定时器重置计数\n        setTimeout(() => {\n            if (windowOpenCountMap.get(url) === newCount) {\n                windowOpenCountMap.delete(url)\n            }\n        }, CLICK_RESET_TIME)\n        \n        // 第一次调用：不执行\n        if (newCount === 1) {\n            console.log('第一次window.open调用，忽略')\n            return window // 返回当前窗口对象\n        }\n        \n        // 第二次及以后：正常执行\n        if (newCount >= 2) {\n            console.log('第二次window.open调用，执行打开')\n            windowOpenCountMap.delete(url)\n            \n            target = '_blank'\n            // 添加安全特性\n            if (!features) {\n                features = 'noopener,noreferrer'\n            }\n        }\n    }\n    \n    try {\n        const result = originalWindowOpen.call(this, url, target, features)\n        console.log('window.open 执行结果:', result)\n        return result\n    } catch (error) {\n        console.error('window.open 执行失败:', error)\n        // 备用方案\n        if (target === '_blank') {\n            window.location.href = url\n        }\n        return null\n    }\n}\n\n// 移除旧的事件监听器（如果存在）\ndocument.removeEventListener('click', hookClick, { capture: true })\n\n// 添加新的点击事件监听器，使用不同的配置\ndocument.addEventListener('click', hookClick, { \n    capture: true, \n    passive: false \n})\n\n// 额外的兼容性处理\ndocument.addEventListener('click', (e) => {\n    const link = e.target.closest('a[target=\"_blank\"]')\n    if (link && link.href) {\n        const currentCount = clickCountMap.get(link.href) || 0\n        console.log(`备用处理器捕获到_blank链接: ${link.href} (第${currentCount + 1}次点击)`)\n    }\n}, false)\n\n// 监听页面加载完成，确保脚本正确初始化\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        console.log('DOM加载完成，双击检测脚本已就绪')\n    })\n} else {\n    console.log('双击检测脚本已就绪')\n}\n\n// 调试用：监听所有窗口打开尝试\nconst originalCreateElement = document.createElement\ndocument.createElement = function(tagName) {\n    const element = originalCreateElement.call(this, tagName)\n    if (tagName.toLowerCase() === 'a') {\n        console.log('创建了新的链接元素')\n    }\n    return element\n}\n\n// 调试功能：查看当前点击计数状态\nwindow.showClickCounts = function() {\n    console.log('当前点击计数状态:')\n    console.log('链接点击计数:', Object.fromEntries(clickCountMap))\n    console.log('window.open调用计数:', Object.fromEntries(windowOpenCountMap))\n}\n\nconsole.log('双击检测功能已启用 - 链接需要点击两次才会跳转')\nconsole.log('可以在控制台运行 showClickCounts() 查看点击状态')","isHtml":false,"htmlPath":"","htmlFiles":[],"more":{"windows":{"label":"","title":"","url":"https://share.claude.best/","userAgent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36","width":800,"height":600,"theme":null,"resizable":true,"fullscreen":false,"maximized":false,"minWidth":400,"minHeight":300,"maxWidth":1920,"maxHeight":1080,"decorations":true,"transparent":false,"titleBarStyle":"Visible","visible":true,"focus":true,"closable":true,"minimizable":true,"maximizable":true,"alwaysOnTop":false,"alwaysOnBottom":false,"center":false,"skipTaskbar":false,"tabbingIdentifier":null,"parent":null,"dragDropEnabled":true,"browserExtensionsEnabled":false,"devtools":true,"contentProtected":false,"hiddenTitle":false,"incognito":false,"proxyUrl":null,"useHttpsScheme":false,"zoomHotkeysEnabled":false,"acceptFirstMouse":false,"create":false}},"phone":{"safeArea":{"top":0,"bottom":0,"left":0,"right":0},"header":{"show":false,"title":"","backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","loading":false,"toolBar":false,"toolBarBackgroundColor":"","toolBarColor":"","toolBarFontSize":16,"toolBarFontWeight":"bold"},"siderMenu":{"show":false,"width":0,"backgroundColor":"","color":"","fontSize":16,"fontWeight":"bold","title":"","titleColor":"","titleFontSize":16,"titleFontWeight":"bold"},"tabBar":{"show":false,"backgroundColor":"","color":"","activeColor":"","fontSize":16,"fontWeight":"bold","tabBarItem":[]},"webview":{"userAgent":"","javaScriptEnabled":true,"domStorageEnabled":true,"allowFileAccess":true,"loadWithOverviewMode":true,"setSupportZoom":true,"clearCache":true}},"ios":{"name":"Claudeexperience","showName":"Claudeexperience","version":"1.0.1","webUrl":"https://share.claude.best/","id":"com.Claudeexperience.app.ios","icon":"./app-icon.png","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":true},"android":{"name":"Claudeexperience","showName":"Claudeexperience","version":"1.0.1","webUrl":"https://share.claude.best/","id":"com.Claudeexperience.app.android","icon":"./app-icon.png","input":"./app-icon.png","output":"./res","rounded":true,"copyTo":"./app/src/main/res","androidResDir":"./app/src/main/res","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途）","isHtml":false,"debug":true},"desktop":{"name":"Claudeexperience","showName":"Claudeexperience","version":"1.0.1","id":"com.Claudeexperience.app.desktop","desc":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途，否则后果自负）","webUrl":"https://share.claude.best/","iconPath":"../app-icon.png","inputPath":"../app-icon.png","tempPath":"./processed-image.png","icnsPath":"../src-tauri/icons/icon.icns","pubBody":"Package for personal use only, please do not use for commercial purposes（打包仅限个人使用，请勿传播或商业用途，否则后果自负）","isHtml":false,"single":true,"state":false,"injectJq":false,"tauriApi":false,"buildMethod":"local","debug":false}}